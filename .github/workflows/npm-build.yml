name: NPM Build Pipeline

on:
  # push:
  #   branches: [ "main" ]
  #   paths:
  #     - "src/typescript/*"
  # pull_request:
  #   types: [opened, reopened, synchronize, edited]
  #   paths:
  #     - "src/typescript/*"
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-test-and-analyze:
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      SHELL_SCRIPTS_PATH: ".github/shell_scripts"
      PYTHON_SCRIPTS_PATH: ".github/python_scripts"
      PR_TITLE_REGEX: '^(feature|feat|fix|ci|docs|style|refactor|perf|test|chore)(\(\d+\))(!)?\:[\s](.+)'
      BRANCH_REGEX: '^(feature|feat|fix|ci|docs|style|refactor|perf|test|chore)(\/)(\d+)(-)([a-zA-Z0-9_-]+$)'
      NODE_VERSION: '20.11.1'
      NODE_WORKING_DIRECTORY: 'src/typescript'
      TAG_PREFIX: 'typescript-v'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true

    #--------------INIT--------------

    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Validate Branch Name
      if: ${{ github.event_name == 'pull_request' }}
      run: python ${{ env.PYTHON_SCRIPTS_PATH }}/branch_checker.py -n "${GITHUB_HEAD_REF#refs/heads/}" -r "${{ env.BRANCH_REGEX }}"

    - name: PR title validator
      if: ${{ github.event_name == 'pull_request' }}
      env:
        PR_TITLE: '${{ github.event.pull_request.title }}'
        PR_DESCRIPTION: ${{ github.event.pull_request.body }}
      run: |
        ${{ env.SHELL_SCRIPTS_PATH }}/pr_title_validate.sh ${GITHUB_HEAD_REF#refs/heads/}

    #--------------TAGGING--------------

    - name: Tag the repository with new version
      if: github.ref == 'refs/heads/main'
      id: version-generator
      run: ${{ env.SHELL_SCRIPTS_PATH }}/apply_version.sh ${GITHUB_HEAD_REF#refs/heads/} ${{ env.TAG_PREFIX }}

    #--------------BUILD--------------

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }} 

    - name: Restore dependencies
      working-directory: ${{ env.NODE_WORKING_DIRECTORY }}
      run: yarn install      

    - name: Clean and build project
      working-directory: ${{ env.NODE_WORKING_DIRECTORY }}
      run: yarn clean && yarn build

    #--------------UPLOAD BUILD ARTIFACTS--------------   

    - name: Upload Library as Artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v2
      with:
        name: library-artifacts
        path: ${{ env.NODE_WORKING_DIRECTORY }}/lib/*
        retention-days: 30

    #--------------GIT TAG PUSH--------------
    - name: Push git tags
      if: github.ref == 'refs/heads/main'
      run: |
        git push --tags || exit 4