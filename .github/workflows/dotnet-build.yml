name: .NET Build Pipeline

on:
  workflow_call:
    inputs:      
      shell_scripts_path:
        type: string
        description: 'Path to shell scripts'
        required: true
      python_scripts_path:
        type: string
        description: 'Path to python scripts'
        required: true
      pr_title_regex:
        type: string
        description: 'PR Title Regex'
        required: true      

permissions:
  contents: write
  pull-requests: write

jobs:
  build-test-and-analyze-job:
    name: Build Test and Analyze Job
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      SHELL_SCRIPTS_PATH: '${{ inputs.shell_scripts_path }}'
      PYTHON_SCRIPTS_PATH: '${{ inputs.python_scripts_path }}'
      PR_TITLE_REGEX: '${{ inputs.pr_title_regex }}'
      SOLUTION_FILE_PATH: 'src/dotnet/StandardisedVesselDataset.sln'
      DOTNET_VERSION: '8.0.x'
      TAG_PREFIX: 'dotnet-'
      NUGET_PACKAGE_ID: 'Standardised.Vessel.Dataset'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true

    #--------------TAGGING--------------

    - name: Tag the repository with new version
      if: github.ref == 'refs/heads/main'
      id: version-generator
      run: |
        ${{ env.SHELL_SCRIPTS_PATH }}/apply_version.sh ${GITHUB_HEAD_REF#refs/heads/}

    #--------------BUILD--------------

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

    #--------------TESTS--------------

    - name: Build and run tests with code coverage
      run: |
        dotnet build ${{ env.SOLUTION_FILE_PATH }} --no-restore
        dotnet test ${{ env.SOLUTION_FILE_PATH }} --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage"
    
    #--------------PACKAGING--------------

    - name: Create NuGet Package    
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet pack ${{ env.SOLUTION_FILE_PATH }} \
        --no-restore \
        --configuration Release \
        /p:Version=${{ env.VersionLabelClean }} \
        --output 'src/dotnet/output'

    #--------------REPORT GENERATION--------------

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.1
      with:
        reports: '**/coverage.cobertura.xml'  # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coverage'                 # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura'   # The output formats and scope
        toolpath: 'reportgeneratortool' 

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coverage/*

    - uses: 5monkeys/cobertura-action@master
      if: ${{ github.event_name == 'pull_request' }}
      with:
        path: coverage/*.xml
        minimum_coverage: 80

    #--------------GIT TAG PUSH--------------
    - name: Push git tags
      if: github.ref == 'refs/heads/main'
      run: |
        git push --tags || exit 4

    #--------------PACKAGING--------------

    - name: Push NuGet Package    
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet nuget push src/dotnet/output/${{ env.NUGET_PACKAGE_ID }}.${{ env.VersionLabelClean }}.nupkg \
        --api-key ${{ secrets.OSS_CEATAEC_NUGET_ORG_SECRET }} \
        --source https://${{ vars.OSS_CEATAEC_NUGET_ORG_URL }}