name: .NET Build Pipeline

on:
  workflow_call:
    inputs:      
      shell_scripts_path:
        type: string
        description: 'Path to shell scripts'
        required: true
      python_scripts_path:
        type: string
        description: 'Path to python scripts'
        required: true
      pr_title_regex:
        type: string
        description: 'PR Title Regex'
        required: true
      dotnet_version:
        type: string
        description: 'The .NET version'
        required: false
        default: '8.0.x'
      solution_file_path:
        type: string
        description: 'Path to the solution file'
        required: false
        default: 'src/dotnet/Ceataec.StandardizedVesselDataset.sln'
      tag_prefix:
        type: string
        description: 'Tag Prefix'
        required: false
        default: 'dotnet-'
      

permissions:
  contents: write
  pull-requests: write

jobs:
  build-test-and-analyze-job:
    name: Build Test and Analyze Job
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      SHELL_SCRIPTS_PATH: ".github/shell_scripts"
      PYTHON_SCRIPTS_PATH: ".github/python_scripts"
      PR_TITLE_REGEX: '^(feature|feat|fix|ci|docs|style|refactor|perf|test|chore)(\(\d+\))(!)?\:[\s](.+)'
      BRANCH_REGEX: '^(feature|feat|fix|ci|docs|style|refactor|perf|test|chore)(\/)(\d+)(-)([a-zA-Z0-9_-]+$)'
      DOTNET_VERSION: '8.0.x'
      SOLUTION_FILE_PATH: 'src/dotnet/Ceataec.StandardisedVesselDataset.sln'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1000
        fetch-tags: true

    #--------------TAGGING--------------

    - name: Tag the repository with new version
      if: github.ref == 'refs/heads/main'
      id: version-generator
      run: |
        ${{ env.SHELL_SCRIPTS_PATH }}/apply_version.sh ${GITHUB_HEAD_REF#refs/heads/}

    #--------------BUILD--------------

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.dotnet_version }}

    - name: Restore dependencies
      run: dotnet restore ${{ inputs.solution_file_path }}

    #--------------TESTS--------------

    - name: Build and run tests with code coverage
      run: |
        dotnet build ${{ inputs.solution_file_path }} --no-restore
        dotnet test ${{ inputs.solution_file_path }} --no-restore --no-build --verbosity normal --collect:"XPlat Code Coverage"
    
    #--------------REPORT GENERATION--------------

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.1
      with:
        reports: '**/coverage.cobertura.xml'  # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coverage'                 # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura'   # The output formats and scope
        toolpath: 'reportgeneratortool' 

    - name: Upload coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: coverage/*

    - uses: 5monkeys/cobertura-action@master
      if: ${{ github.event_name == 'pull_request' }}
      with:
        path: coverage/*.xml
        minimum_coverage: 80

    #--------------GIT TAG PUSH--------------
    - name: Push git tags
      if: github.ref == 'refs/heads/main'
      run: |
        git push --tags || exit 4